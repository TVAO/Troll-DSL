\ examples

\ n (number, e.g. 10)
10

\ x (variable, e.g. x = 1)
(define x 1)

\ d n = roll one dn (die labelled 1 - n)
\ d e (single (n=e) n-sided die roll result, e.g. (d 3))
(d (d 3))

\ mdn = roll m (d n)
\ e1 d e2 (m=e1 rolls with n=e2 sided die roll result)
(mdn 2 3) 

\ m#e = m samples of e in list collection 
\ e1 # e2 TODO

\ Arithmetic on single values (die roll results): +, - 
\ e1+e2 
(+ (d 12) (d 8))
\ e1-e2 (negative number results are valid) 
(- (d 12) (d 8))

\ Filters: keep values from 2nd argument that compare to 1st argument 
\ e1 < e2 TODO
\ e1 > e2 TODO

\ sum e: add up values in list collection TODO
\ count e: count values in list collection TODO
\ {e1, ..., en}: = (union e1 (union e2 ... (union en))) union of e_1, ..., e_n with append on list collections and single values wrapped as lists 

\ min e: min value in list collection, least 1 e TODO
\ max e: max value in list collection, largest 1 e TODO
\ least e1 e2: n least values in list collection TODO
\ largest e1 e2: n largest values in list collection TODO

\ choose e: choose value from list collection of length n with index 1...n uniformly random TODO
\ x := e1; e2 : bind x to value of e1 in e2 (e.g. x := d6; x + x) TODO

\ accumulate x := e1 while e2: repeatedly evaluate e1 while or until e2 becomes true (non empty). Return union of all values (e.g. x := d6 while x < 6) returns list of all 6-sided die results until one is 6 TODO

\ Guide runs 

\ d12 + d8 
(+ (d 12) (d 8))

\ min 2d20
(min (mdn 2 20))

\ max 2d20
(max (mdn 2 20))

\ sum largest 3 4d6
(sum (largest 3 (mdn 4 6)))

\ count 7 < 10d10
(count (filter 7 < (mdn 10 10)))

\ choose { 1, 3, 5}
(choose '(1 3 5)) 

\ x:= 3d6; (min x) + (max x)
(let (mdn 3 6) (lambda (x) (+ (min x) (max x))))

\ accumulate x:=d6 while x>2 HARD 
\ (accumulate d6 '(> x 2))

(accumulate (lambda () (d 6)) (lambda (x) (> x 2)))

(accumulate (lambda () (d 6)) (lambda (x) (filter 6 > x)))